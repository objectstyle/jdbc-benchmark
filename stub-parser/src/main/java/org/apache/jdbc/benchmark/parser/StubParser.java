/* StubParser.java */
/* Generated By:JavaCC: Do not edit this line. StubParser.java */
package org.apache.jdbc.benchmark.parser;

import org.apache.jdbc.benchmark.descriptor.ColumnDescriptor;
import org.apache.jdbc.benchmark.descriptor.ResultDescription;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Map;

public class StubParser implements StubParserConstants {

    /** Main entry point. */
    static StubParser parser = null ;

    public static ResultDescription initParser(InputStream inputStream) throws ParseException, TokenMgrError {
        if (parser == null) {
            parser = new StubParser(inputStream);
        } else {
            parser.ReInit(inputStream);
        }
        return Input();
    }

  static final public ResultDescription Input() throws ParseException {ResultDescription resultDescription = new ResultDescription();
        ColumnDescriptor columnDescriptor = new ColumnDescriptor();
        String[] leftTable = new String[2];
        String[] rightTable = new String[2];
        ColumnDescriptor unionField1 = new ColumnDescriptor();
        ColumnDescriptor unionField2 = new ColumnDescriptor();
        ColumnDescriptor where = new ColumnDescriptor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      jj_consume_token(SELECT);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DISTINCT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(DISTINCT);
      }
      Select(resultDescription.getColumnDescriptorArrayList(), resultDescription.getLabelsForColumns(), columnDescriptor);
      jj_consume_token(FROM);
      Table(leftTable);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case JOIN:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(JOIN);
        Table(rightTable);
resultDescription.setJoin(true);
        jj_consume_token(ON);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case obra:{
            ;
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            break label_3;
          }
          jj_consume_token(obra);
        }
        Column(unionField1);
        jj_consume_token(equally);
        Column(unionField2);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case cbra:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_4;
          }
          jj_consume_token(cbra);
        }
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case WHERE:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(WHERE);
        Where(where);
resultDescription.setWhere(true);
      }
      jj_consume_token(0);
for (ColumnDescriptor descriptor : resultDescription.getColumnDescriptorArrayList()) {
                changeTableName(descriptor, leftTable, rightTable[1]);
            }
            resultDescription.setTableLeftName(leftTable[1]);
            if (rightTable[1] != null) {
                resultDescription.setTableRightName(rightTable[1]);
                changeTableName(unionField1, leftTable, rightTable[1]);
                changeTableName(unionField2, leftTable, rightTable[1]);
                resultDescription.getUnionColumn().add(unionField1);
                resultDescription.getUnionColumn().add(unionField2);
            }
            if (resultDescription.getWhere()) {
                changeTableName(where, leftTable, rightTable[1]);
                resultDescription.getWhereColumnDescriptorArrayList().add(where);
            }
{if ("" != null) return resultDescription;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return resultDescription;}
    }
    throw new Error("Missing return statement in function");
}

  static final public void Select(ArrayList<ColumnDescriptor> columnDescriptors, Map<String, String> labelsForColumns, ColumnDescriptor columnDescriptor) throws ParseException {Token label;
    Column(columnDescriptor);
columnDescriptors.add(new ColumnDescriptor(columnDescriptor.getName(), columnDescriptor.getTableName()));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AS:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      jj_consume_token(AS);
      label = jj_consume_token(COLUMN);
labelsForColumns.put(label.image, columnDescriptor.getName());
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case comma:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      jj_consume_token(comma);
      Column(columnDescriptor);
columnDescriptors.add(new ColumnDescriptor(columnDescriptor.getName(), columnDescriptor.getTableName()));
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AS:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_8;
        }
        jj_consume_token(AS);
        label = jj_consume_token(COLUMN);
labelsForColumns.put(label.image, columnDescriptor.getName());
      }
    }
{if ("" != null) return;}
}

  static final public void Column(ColumnDescriptor columnDescriptor) throws ParseException {Token column;
    column = jj_consume_token(COLUMN);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case dot:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      jj_consume_token(dot);
columnDescriptor.setTableName(column.image);
      column = jj_consume_token(COLUMN);
columnDescriptor.setName(column.image);
            {if ("" != null) return;}
    }
columnDescriptor.setTableName("null");
        columnDescriptor.setName(column.image);
        {if ("" != null) return;}
}

  static final public void Table(String[] strings) throws ParseException {Token table;
    table = jj_consume_token(COLUMN);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case dot:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_10;
      }
      jj_consume_token(dot);
      table = jj_consume_token(COLUMN);
    }
strings[1] = table.image;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLUMN:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_11;
      }
      table = jj_consume_token(COLUMN);
strings[0] = table.image;
    }
{if ("" != null) return;}
}

  static final public void Where(ColumnDescriptor columnDescriptor) throws ParseException {Token param;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UPPER:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_12;
      }
      jj_consume_token(UPPER);
      jj_consume_token(obra);
    }
    Column(columnDescriptor);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case cbra:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_13;
      }
      jj_consume_token(cbra);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case equally:{
      jj_consume_token(equally);
      break;
      }
    case LIKE:{
      jj_consume_token(LIKE);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case UPPER:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_14;
      }
      jj_consume_token(UPPER);
      jj_consume_token(obra);
    }
    param = jj_consume_token(question);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case cbra:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_15;
      }
      jj_consume_token(cbra);
    }
columnDescriptor.setWhereParam(param.image);
        {if ("" != null) return;}
}

  static final public void changeTableName(ColumnDescriptor columnDescriptor, String[] leftTable, String rightTable) throws ParseException {
if (columnDescriptor.getTableName().equals(leftTable[0])) {
            columnDescriptor.setTableName(leftTable[1]);
        } else {
            columnDescriptor.setTableName(rightTable);
        }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public StubParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[17];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x2000,0x100,0x80000,0x100000,0x400,0x20,0x4000,0x8000,0x4000,0x10000,0x10000,0x200000,0x1000,0x100000,0x20800,0x1000,0x100000,};
	}

  /** Constructor with InputStream. */
  public StubParser(InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public StubParser(InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new StubParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public StubParser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new StubParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new StubParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public StubParser(StubParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(StubParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 17; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[22];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 17; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 22; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
